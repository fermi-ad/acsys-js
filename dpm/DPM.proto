//  (c) 2012 Fermi Research Alliance
//  $Id: DPM.proto,v 1.40 2021/03/23 19:22:29 kingc Exp $
//
//  Rebuild# 6

//
// DPM service discovery/Load balancing
//

request ServiceDiscovery {
}

reply ServiceDiscovery {
    int16 load;
    string serviceLocation;	// ACNET or IP node name
}

//
// DPM list manipulation messages
//

request OpenList {
    optional string location;
}

reply OpenList {
    int32 list_id;
}

request AddToList {
    int32 list_id;
    int64 ref_id;
    string drf_request;
}

request Authenticate {
    int32 list_id;
    binary token;
}

reply Authenticate {
	optional string serviceName;
	optional binary token;
}

request EnableSettings {
    int32 list_id;
    binary MIC;
    binary message;
}

reply AddToList {
    int32 list_id;
    int64 ref_id;
    int16 status;
}

request RemoveFromList {
    int32 list_id;
    int64 ref_id;
}

reply RemoveFromList {
    int32 list_id;
    int64 ref_id;
    int16 status;
}

request StartList {
    int32 list_id;
    optional string model;
}

reply StartList {
    int32 list_id;
    int16 status;
}

request ClearList {
    int32 list_id;
}

request StopList {
    int32 list_id;
}

reply ListStatus {
    int32 list_id;
    int16 status;
}

//
// DPM data reply messages
//

reply Status {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int16 status;
}

reply DeviceInfo {
    int64 ref_id;

    int32 di;
    string name;
    string description;
    optional string units;
    optional int16 format_hint;
}

reply Scalar {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int16 status;
    double data;
}
 
reply ScalarArray {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int16 status;
    double data[];
}

reply Raw {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int16 status;
    binary data;
}

reply Text {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int16 status;
    string data;
}

reply TextArray {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int16 status;
    string data[];
}

reply AnalogAlarm {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    double minimum;
    double maximum;
    bool alarm_enable;
    bool alarm_status;
    bool abort;
    bool abort_inhibit;
    int32 tries_needed;
    int32 tries_now;
}

reply DigitalAlarm {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int32 nominal;
    int32 mask;
    bool alarm_enable;
    bool alarm_status;
    bool abort;
    bool abort_inhibit;
    int32 tries_needed;
    int32 tries_now;
}

reply BasicStatus {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    optional bool on;
    optional bool ready;
    optional bool remote;
    optional bool positive;
    optional bool ramp;
}

reply TimedScalarArray {
    int64 ref_id;
    int64 timestamp;
    int64 cycle;

    int16 status;
    double data[];
    int64 micros[];
}

struct RawSetting {
    int64 ref_id;
    binary data;
}

struct ScaledSetting {
    int64 ref_id;
    double data[];
}

struct TextSetting {
    int64 ref_id;
    string data[];
}

request ApplySettings {
    string user_name;
    int32 list_id;
    optional RawSetting raw_array[];
    optional ScaledSetting scaled_array[];
    optional TextSetting text_array[];
}

struct SettingStatus {
    int64 ref_id;
    int16 status;
}

reply ApplySettings {
    SettingStatus status[];
}

